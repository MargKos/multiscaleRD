'' Files'''

import numpy as np

# sim=500


'B Mauricio Parameters'
def function1(x):
	if 5.1<=x[0]<=6.1 and 1.5<=x[1]<=2.5:
		ux=7000 
	elif 5.1<=x[0]<=6.1 and 4.5<=x[1]<=5.5:
		ux=7000 
	elif 5.1<=x[0]<=6.1 and 7.5<=x[1]<=8.5:
		ux=7000 
	else:
		ux=0
	
	return ux    

def function2(x):
    
    if np.linalg.norm(x-np.array([6.5,2.5]))<0.5: 
        ux=800 

    elif np.linalg.norm(x-np.array([6.5,7.5]))<0.5: 
        ux=800 
       
    else:
        ux=0
    
    return ux


l=100+1
m=l
deltat=0.005
timesteps=300+1
a=10
h=a/(l-1) # grid size 

maxtime=(timesteps-1)*deltat

D1=0.8 
D2=0.8 
D3=0.8

sigma=0.01
r1_macro=0.015 # infection rate macro
r2=0.5 # recovery rate
r2_macro=r2
r1=r1_macro/(np.pi*(sigma**2))  # infection rate mictoe
Lx=a/2 # half of the grid
deltar1=np.sqrt(deltat*D1*2) # boundary size
deltar2=np.sqrt(deltat*D2*2) # boundary size
deltar3=np.sqrt(deltat*D3*2) # boundary size

l_coupling=l-1 
save_time=0.1 

# FD files

ReferenceSus = np.load('./Solutions/FDSIR1_B.npy')
ReferenceInf = np.load('./Solutions/FDSIR2_B.npy')
ReferenceRec = np.load('./Solutions/FDSIR3_B.npy')

# Simulations Files

# tau reaction, exlicit injection
Sus_s_t=np.load('/home/htc/bzfkostr/SCRATCH/SimulationsMultiscale/'+str('SIRSusTauBTest')+str(s)+ 'time'
                    +str(t)+'.npy', allow_pickle=True)
Inf_s_t=np.load('/home/htc/bzfkostr/SCRATCH/SimulationsMultiscale/'+str('SIRInfTauBTest')+str(s)+ 'time'
        +str(t)+'.npy', allow_pickle=True)
Recovery_s_t=np.load('/home/htc/bzfkostr/SCRATCH/SimulationsMultiscale/'+str('SIRRecoveryTauBTest')+str(s)+ 'time'
        +str(t)+'.npy', allow_pickle=True)

# tau reaction and injection

Sus_s_t=np.load('/home/htc/bzfkostr/SCRATCH/SimulationsMultiscale/'+str('SIRSusTauB')+str(s)+ 'time'
                    +str(t)+'.npy', allow_pickle=True)
Inf_s_t=np.load('/home/htc/bzfkostr/SCRATCH/SimulationsMultiscale/'+str('SIRInfTauB')+str(s)+ 'time'
        +str(t)+'.npy', allow_pickle=True)
Recovery_s_t=np.load('/home/htc/bzfkostr/SCRATCH/SimulationsMultiscale/'+str('SIRRecoveryTauB')+str(s)+ 'time'
        +str(t)+'.npy', allow_pickle=True)

# explicit reaction and injection


Sus_s_t=np.load('/home/htc/bzfkostr/SCRATCH/SimulationsMultiscale/'+str('SIRSusExplicitB')+str(s)+ 'time'
                    +str(t)+'.npy', allow_pickle=True)
Inf_s_t=np.load('/home/htc/bzfkostr/SCRATCH/SimulationsMultiscale/'+str('SIRInfExplicitB')+str(s)+ 'time'
        +str(t)+'.npy', allow_pickle=True)
Recovery_s_t=np.load('/home/htc/bzfkostr/SCRATCH/SimulationsMultiscale/'+str('SIRRecoveryExplicitB')+str(s)+ 'time'
        +str(t)+'.npy', allow_pickle=True)

# times

TimeExact=np.load('/home/htc/bzfkostr/SCRATCH/SimulationsMultiscale/SIR_timeExplicitCutB'+str(s)+'.npy') #with explicit injection and reaction
TimeTau=np.load('/home/htc/bzfkostr/SCRATCH/SimulationsMultiscale/SIR_timeTauCutB'+str(s)+'.npy')   # with tau injection and reaction
TimeTauTest=np.load('/home/htc/bzfkostr/SCRATCH/SimulationsMultiscale/SIR_timeTauTestCutB'+str(s)+'.npy') # with exlicit injection



# Mean-field Files

# explicit injection and reaction

DiscreteSusAverage = np.load('./Solutions/SusAverageExplicit.npy')
DiscreteInfAverage = np.load('./Solutions/InfAverageExplicit.npy')
DiscreteRecAverage = np.load('./Solutions/RecAverageExplicit.npy')

# tau reaction injection

DiscreteSusAverageTau = np.load('./Solutions/SusAverageTauBTest.npy')
DiscreteInfAverageTau = np.load('./Solutions/InfAverageTauBTest.npy')
DiscreteRecAverageTau = np.load('./Solutions/RecAverageTauBTest.npy')

# tau reaction, exlicit injection
DiscreteSusAverageTauTest = np.load('./Solutions/SusAverageTauBTest.npy')
DiscreteInfAverageTauTest = np.load('./Solutions/InfAverageTauBTest.npy')
DiscreteRecAverageTauTest = np.load('./Solutions/RecAverageTauBTest.npy')


# JSD files, at time steps [5,8]

# explicit injection and reaction

np.save('./Solutions/JSDSusExplicitB.npy', SusJSDSimulations)
np.save('./Solutions/JSDRecExplicitB.npy', RecJSDSimulations)
np.save('./Solutions/JSDInfExplicitB.npy', InfJSDSimulations)

# tau injection and reaction

np.save('./Solutions/JSDSusTauB.npy', SusJSDSimulations)
np.save('./Solutions/JSDRecTauB.npy', RecJSDSimulations)
np.save('./Solutions/JSDInfTauB.npy', InfJSDSimulations)

# tau reaction, exlicit injection

np.save('./Solutions/JSDSusTauBTest.npy', SusJSDSimulations)
np.save('./Solutions/JSDRecTauBTest.npy', RecJSDSimulations)
np.save('./Solutions/JSDInfTauBTest.npy', InfJSDSimulations)

